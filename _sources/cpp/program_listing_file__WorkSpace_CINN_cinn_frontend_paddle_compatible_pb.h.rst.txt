
.. _program_listing_file__WorkSpace_CINN_cinn_frontend_paddle_compatible_pb.h:

Program Listing for File compatible_pb.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__WorkSpace_CINN_cinn_frontend_paddle_compatible_pb.h>` (``/WorkSpace/CINN/cinn/frontend/paddle/compatible_pb.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright (c) 2021 CINN Authors. All Rights Reserved.
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   #include "cinn/frontend/paddle/cpp/block_desc.h"
   #include "cinn/frontend/paddle/cpp/desc_api.h"
   #include "cinn/frontend/paddle/cpp/op_desc.h"
   #include "cinn/frontend/paddle/cpp/program_desc.h"
   #include "cinn/frontend/paddle/cpp/var_desc.h"
   
   namespace cinn::frontend::paddle {
   
   template <typename VarDescType>
   void TransformVarDescAnyToCpp(const VarDescType& any_desc, cpp::VarDesc* cpp_desc);
   
   template <typename VarDescType>
   void TransformVarDescCppToAny(const cpp::VarDesc& cpp_desc, VarDescType* any_desc);
   
   template <typename OpDescType>
   void TransformOpDescAnyToCpp(const OpDescType& any_desc, cpp::OpDesc* cpp_desc);
   
   template <typename OpDescType>
   void TransformOpDescCppToAny(const cpp::OpDesc& cpp_desc, OpDescType* any_desc);
   
   template <typename BlockDescType>
   void TransformBlockDescAnyToCpp(const BlockDescType& any_desc, cpp::BlockDesc* cpp_desc);
   
   template <typename BlockDescType>
   void TransformBlockDescCppToAny(const cpp::BlockDesc& cpp_desc, BlockDescType* any_desc);
   
   template <typename ProgramDescType>
   void TransformProgramDescAnyToCpp(const ProgramDescType& any_desc, cpp::ProgramDesc* cpp_desc);
   
   template <typename ProgramDescType>
   void TransformProgramDescCppToAny(const cpp::ProgramDesc& cpp_desc, ProgramDescType* any_desc);
   
   }  // namespace cinn::frontend::paddle
