.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_net_builder.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_net_builder.py:


Run model by using NetBuilder API
=========================================================

In this tutorial, we will introduce the ways to build and run a model using NetBuilder APIs.


.. code-block:: python


    import cinn
    from cinn import frontend
    from cinn import common
    import numpy as np
    # sphinx_gallery_thumbnail_path = './paddlepaddle.png'








Define the NetBuilder.
-----------------------------

Using NetBuilder is a convenient way to build a model in CINN.
You can build and run a model by invoking NetBuilder's API as following.

:code:`name`: the ID of NetBuilder

Generally, the API in `NetBuilder` is coarse-grained operator, in other words,
the DL framework like Paddle's operator.


.. code-block:: python

    builder = frontend.NetBuilder(name="batchnorm_conv2d")








Define the input variable of the model.
---------------------------------------------

The input variable should be created by create_input API. Note that the variable
here is just a placeholder, does not need the actual data.

:code:`type`: the data type of input variable, now support `Void`, `Int`, `UInt`,
`Float`, `Bool` and `String`, the parameter is the type's bit-widths, here the
data type is `float32`.

:code:`shape`: The shape of the input variable, note that here does not support
dynamic shape, so the dimension value should be greater than 0 now.

:code:`id_hint`: the name of variable, the defaule value is `""`


.. code-block:: python

    a = builder.create_input(
        type=common.Float(32), shape=(8, 3, 224, 224), id_hint="x")
    scale = builder.create_input(type=common.Float(32), shape=[3], id_hint="scale")
    bias = builder.create_input(type=common.Float(32), shape=[3], id_hint="bias")
    mean = builder.create_input(type=common.Float(32), shape=[3], id_hint="mean")
    variance = builder.create_input(
        type=common.Float(32), shape=[3], id_hint="variance")
    weight = builder.create_input(
        type=common.Float(32), shape=(3, 3, 7, 7), id_hint="weight")








Build the model by using NetBuilder API
---------------------------------------------

For convenience, here we build a simple model that only consists of batchnorm and conv2d
operators. Note that you can find the operator's detailed introduction in another
document, we won't go into detail here.


.. code-block:: python

    y = builder.batchnorm(a, scale, bias, mean, variance, is_test=True)
    res = builder.conv2d(y[0], weight)








Set target
---------------------

The target identified where the model should run, now we support
two targets:

:code:`DefaultHostTarget`: the model will running at cpu.

:code:`DefaultNVGPUTarget`: the model will running at nv gpu.


.. code-block:: python

    if common.is_compiled_with_cuda():
        target = common.DefaultNVGPUTarget()
    else:
        target = common.DefaultHostTarget()

    print("Model running at ", target.arch)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Model running at  Arch.X86




Generate the program
---------------------

After the model building, the `Computation` will generate a CINN execution program,
and you can get it like:


.. code-block:: python

    computation = frontend.Computation.build_and_compile(target, builder)








Random fake input data
-----------------------------

Before running, you should read or generate some data to feed the model's input.
:code:`get_tensor`: Get the tensor with specific name in computation.
:code:`from_numpy`: Fill the tensor with numpy data.


.. code-block:: python

    tensor_data = [
        np.random.random([8, 3, 224, 224]).astype("float32"),  # a
        np.random.random([3]).astype("float32"),  # scale
        np.random.random([3]).astype("float32"),  # bias
        np.random.random([3]).astype("float32"),  # mean
        np.random.random([3]).astype("float32"),  # variance
        np.random.random([3, 3, 7, 7]).astype("float32")  # weight
    ]

    computation.get_tensor("x").from_numpy(tensor_data[0], target)
    computation.get_tensor("scale").from_numpy(tensor_data[1], target)
    computation.get_tensor("bias").from_numpy(tensor_data[2], target)
    computation.get_tensor("mean").from_numpy(tensor_data[3], target)
    computation.get_tensor("variance").from_numpy(tensor_data[4], target)
    computation.get_tensor("weight").from_numpy(tensor_data[5], target)








Run program and print result
-----------------------------

Finally, you can run the model by invoking function `execute()`.
After that, you can get the tensor you want by `get_tensor` with tensor's name.


.. code-block:: python

    computation.execute()
    res_tensor = computation.get_tensor(str(res))
    res_data = res_tensor.numpy(target)

    # print result
    print(res_data)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[[[-32.083755 -28.277033 -25.638784 ... -29.775146 -29.728668
        -31.433064]
       [-27.691217 -29.852478 -31.044724 ... -33.318745 -27.607113
        -29.616003]
       [-29.415274 -30.150145 -28.367453 ... -31.640392 -28.370983
        -30.478767]
       ...
       [-25.369015 -27.397968 -27.597858 ... -32.674168 -31.949446
        -31.156208]
       [-21.97459  -26.864378 -28.542511 ... -29.255995 -36.200817
        -34.835804]
       [-20.998781 -27.588665 -24.192604 ... -28.922237 -34.756783
        -31.757174]]

      [[-24.87749  -23.93989  -25.49907  ... -24.393396 -23.043205
        -22.221195]
       [-28.622677 -29.08847  -23.72474  ... -25.969131 -26.7727
        -27.316477]
       [-26.476492 -25.619707 -21.07883  ... -27.575567 -19.058662
        -28.54594 ]
       ...
       [-18.513311 -20.472467 -23.275639 ... -26.430626 -27.304256
        -25.369915]
       [-16.890142 -23.78533  -16.226576 ... -28.177555 -29.246246
        -28.355381]
       [-22.7606   -21.686108 -19.811619 ... -29.090832 -26.322887
        -26.569134]]

      [[-36.336643 -34.379658 -34.062428 ... -36.239635 -38.091175
        -30.184969]
       [-36.926186 -36.214603 -29.985844 ... -34.50409  -32.513233
        -32.423008]
       [-31.582457 -37.107624 -33.983932 ... -33.008274 -34.575283
        -32.049416]
       ...
       [-25.68767  -35.93067  -27.939592 ... -35.449223 -34.70081
        -33.41114 ]
       [-26.137808 -30.963186 -25.356277 ... -36.700905 -38.766926
        -38.90348 ]
       [-32.095364 -32.418907 -26.780388 ... -35.204704 -37.704834
        -41.42209 ]]]


     [[[-32.17134  -29.242693 -27.242197 ... -18.249071 -19.959028
        -21.536022]
       [-28.262804 -29.993593 -29.471296 ... -20.865623 -19.151642
        -20.928385]
       [-26.76036  -30.62042  -32.024338 ... -15.69079  -23.17112
        -23.549833]
       ...
       [-28.710445 -26.06501  -18.275946 ... -21.712524 -20.448858
        -23.869122]
       [-23.090176 -23.949652 -14.579302 ... -16.492798 -20.002337
        -21.789145]
       [-23.489216 -24.94971  -22.25313  ... -19.062372 -22.543636
        -26.73143 ]]

      [[-25.859697 -23.609386 -19.927515 ... -18.553133 -13.02674
        -16.315363]
       [-26.935562 -26.737572 -28.112665 ... -17.576004 -18.18793
        -18.366205]
       [-23.864998 -28.199581 -23.953676 ... -15.369392 -15.663889
        -21.096184]
       ...
       [-25.647486 -19.763906 -17.428429 ... -18.074038 -21.01367
        -22.065899]
       [-17.623844 -22.07527  -17.643925 ... -19.990774 -18.83973
        -18.333597]
       [-21.45309  -19.774864 -15.339674 ... -17.400558 -15.70997
        -18.023872]]

      [[-33.34414  -31.66887  -33.097466 ... -19.807238 -22.793419
        -29.077776]
       [-35.94042  -32.03932  -36.583992 ... -21.486542 -20.667187
        -23.922066]
       [-33.234753 -36.843952 -37.683304 ... -25.106998 -24.868408
        -23.640778]
       ...
       [-29.180754 -25.83973  -26.072487 ... -25.49811  -23.834845
        -30.113651]
       [-29.828564 -23.839859 -22.886333 ... -22.676968 -22.192608
        -25.930046]
       [-26.076797 -31.700796 -22.476954 ... -26.493876 -23.976534
        -25.783026]]]


     [[[-25.90604  -29.638197 -31.674673 ... -25.349216 -21.480843
        -18.689503]
       [-25.854929 -30.001575 -31.215921 ... -20.417984 -18.699709
        -20.244429]
       [-29.2192   -30.484833 -34.21475  ... -23.297604 -23.117487
        -25.103415]
       ...
       [-27.963657 -29.971722 -32.82553  ... -23.809895 -30.805676
        -32.81528 ]
       [-25.547764 -27.884768 -29.875694 ... -26.43834  -33.16467
        -33.07623 ]
       [-26.334345 -29.286425 -27.811762 ... -30.924442 -27.511618
        -36.11759 ]]

      [[-22.465185 -24.145918 -25.717077 ... -25.937113 -16.14525
        -19.987667]
       [-25.049288 -27.619055 -29.995546 ... -22.275948 -17.421234
        -15.403507]
       [-25.14622  -27.470154 -26.823822 ... -16.658382 -17.066566
        -18.69833 ]
       ...
       [-20.595522 -25.120209 -23.885841 ... -22.089407 -28.908815
        -24.889654]
       [-23.648571 -25.625025 -22.274376 ... -27.079521 -26.610086
        -29.300571]
       [-21.590322 -24.769928 -29.44771  ... -25.722797 -26.590261
        -33.426346]]

      [[-26.767487 -33.037334 -34.07745  ... -28.256493 -24.99288
        -27.524763]
       [-36.93624  -34.55149  -35.60641  ... -27.112555 -21.971272
        -26.774443]
       [-35.29402  -38.84241  -32.109455 ... -28.108747 -24.786577
        -26.175333]
       ...
       [-33.77845  -31.987066 -34.342167 ... -28.880802 -35.117573
        -36.238537]
       [-32.03578  -32.127174 -29.323624 ... -31.21359  -31.761353
        -37.42686 ]
       [-32.509693 -34.72139  -36.04278  ... -30.509174 -35.19944
        -36.81163 ]]]


     ...


     [[[-26.558624 -29.011059 -24.545847 ... -27.342018 -26.070005
        -24.160229]
       [-26.878944 -24.181715 -22.03939  ... -24.744919 -23.411976
        -28.209515]
       [-27.000662 -26.768364 -21.223778 ... -26.723494 -29.972218
        -29.59043 ]
       ...
       [-21.361963 -23.937664 -21.719194 ... -26.947788 -27.141085
        -25.200516]
       [-25.843166 -24.64525  -23.277184 ... -21.762678 -28.359509
        -31.010246]
       [-31.872776 -28.89058  -26.277618 ... -31.034658 -30.663553
        -31.514526]]

      [[-27.529062 -25.332079 -24.477076 ... -21.873348 -21.254597
        -22.42655 ]
       [-23.23145  -22.884853 -22.469637 ... -18.77818  -18.705671
        -23.2563  ]
       [-24.770098 -16.984686 -22.773863 ... -25.8289   -23.690554
        -20.452103]
       ...
       [-20.055918 -22.311365 -20.368967 ... -23.465385 -19.921873
        -26.309555]
       [-24.590399 -19.276735 -18.034105 ... -22.527145 -27.74202
        -25.323895]
       [-20.397354 -19.408895 -25.001518 ... -24.325132 -26.668161
        -28.651518]]

      [[-34.580307 -36.002033 -27.377249 ... -28.750769 -30.707922
        -32.962166]
       [-26.421543 -31.12704  -28.906498 ... -28.439182 -26.210371
        -27.670876]
       [-29.373371 -27.79796  -30.711096 ... -33.8716   -30.517485
        -34.125698]
       ...
       [-31.192059 -31.945263 -23.867739 ... -30.221313 -33.426094
        -32.594406]
       [-26.064123 -27.91137  -23.686441 ... -28.920328 -32.976105
        -31.082535]
       [-31.128517 -31.52962  -31.785357 ... -31.787823 -36.074146
        -34.7288  ]]]


     [[[-31.225225 -28.74161  -25.902985 ... -22.926847 -19.50283
        -26.633183]
       [-28.15043  -27.56933  -26.126757 ... -22.803865 -21.317781
        -28.996094]
       [-30.378931 -26.295216 -24.791576 ... -25.820312 -20.740757
        -29.213137]
       ...
       [-25.802258 -26.590149 -24.162703 ... -23.318514 -24.452572
        -21.996714]
       [-25.30189  -25.19122  -19.42739  ... -22.588327 -21.419308
        -19.808002]
       [-24.810032 -23.23572  -23.325693 ... -24.942923 -24.519243
        -24.615816]]

      [[-26.439758 -22.442749 -26.61142  ... -19.562162 -12.543569
        -22.01497 ]
       [-22.426882 -27.348768 -21.42856  ... -22.35003  -15.955251
        -21.897219]
       [-21.70095  -17.116835 -19.849226 ... -19.278185 -18.007742
        -25.515976]
       ...
       [-24.605152 -23.768028 -19.103807 ... -17.688917 -18.202427
        -20.415897]
       [-22.025143 -22.01571  -18.614656 ... -23.043863 -19.627396
        -20.363197]
       [-21.301273 -22.176807 -22.093487 ... -20.67002  -21.034914
        -21.064117]]

      [[-28.366678 -32.28917  -31.071585 ... -33.39503  -22.417158
        -32.88395 ]
       [-32.81894  -27.798729 -29.649027 ... -30.850334 -26.380533
        -30.506098]
       [-32.712097 -31.03036  -23.791267 ... -27.137348 -23.524078
        -31.465704]
       ...
       [-28.816757 -32.18585  -26.749918 ... -25.759005 -32.176235
        -25.216408]
       [-33.65353  -28.498013 -23.727777 ... -25.563715 -24.615288
        -23.547695]
       [-28.610586 -29.151121 -27.287636 ... -31.97307  -32.90161
        -23.210985]]]


     [[[-17.643063 -18.307463 -18.326767 ... -30.356667 -28.340824
        -26.81304 ]
       [-20.7255   -15.513283 -17.710428 ... -27.792204 -26.774076
        -24.788353]
       [-18.579107 -16.405985 -18.407448 ... -27.221169 -26.76049
        -25.512962]
       ...
       [-29.642826 -24.71326  -28.243692 ... -21.439491 -25.140257
        -26.981787]
       [-22.957203 -20.933256 -27.705551 ... -25.398838 -22.057873
        -23.755535]
       [-23.744156 -21.251787 -22.559761 ... -19.30142  -21.63926
        -31.942131]]

      [[-16.767609 -18.373425 -18.217657 ... -24.18774  -25.033691
        -25.927776]
       [-16.235348 -13.396036 -14.099486 ... -21.173035 -23.754688
        -22.367794]
       [-14.355827 -19.712088 -15.136566 ... -25.748104 -27.765123
        -24.4023  ]
       ...
       [-20.14892  -21.954405 -28.836773 ... -24.068493 -17.146955
        -24.56471 ]
       [-24.763227 -21.445827 -21.174513 ... -19.946514 -15.365329
        -23.90397 ]
       [-15.913421 -17.713158 -20.069603 ... -18.102865 -23.212128
        -21.477592]]

      [[-25.412586 -17.609968 -21.530785 ... -31.998302 -35.485123
        -33.739304]
       [-21.155008 -19.219131 -19.844957 ... -28.147043 -30.84547
        -31.045277]
       [-18.244074 -20.608362 -22.146034 ... -28.696724 -31.491798
        -31.246729]
       ...
       [-30.146551 -26.394905 -34.014385 ... -27.769817 -28.832287
        -38.49785 ]
       [-29.14026  -27.447657 -27.555271 ... -31.304945 -28.357706
        -33.847435]
       [-26.115108 -22.970295 -23.077232 ... -25.583662 -27.709597
        -30.478352]]]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.215 seconds)


.. _sphx_glr_download_tutorials_net_builder.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: net_builder.py <net_builder.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: net_builder.ipynb <net_builder.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
