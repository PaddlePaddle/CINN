.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_cinn_builder.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_cinn_builder.py:


Run model by using CinnBuilder API
=========================================================

In this tutorial, we will introduce the ways to build and run a model using CinnBuilder APIs.


.. code-block:: python


    import cinn
    from cinn import frontend
    from cinn import common
    import numpy as np
    # sphinx_gallery_thumbnail_path = './paddlepaddle.png'








Define the CinnBuilder.
-----------------------------

Using CinnBuilder is a convenient way to build a model in CINN. You can build and run
a model by invoking CinnBuilder's API as following.

:code:`name`: the ID of CinnBuilder


.. code-block:: python

    builder = frontend.CinnBuilder(name="add_conv")








Define the input variable of the model.
---------------------------------------------

The input variable should be created by create_input API. Note that the variable
here is just a placeholder, does not need the actual data.

:code:`type`: the data type of input variable, now support `Void`, `Int`, `UInt`,
`Float`, `Bool` and `String`, the parameter is the type's bit-widths, here the
data type is `float32`.

:code:`shape`: The shape of the input variable, note that here does not support
dynamic shape, so the dimension value should be greater than 0 now.

:code:`id_hint`: the name of variable, the defaule value is `""`


.. code-block:: python

    a = builder.create_input(
        type=common.Float(32), shape=(1, 24, 56, 56), id_hint="A")
    b = builder.create_input(
        type=common.Float(32), shape=(1, 24, 56, 56), id_hint="B")
    c = builder.create_input(
        type=common.Float(32), shape=(144, 24, 1, 1), id_hint="C")








Build the model by using CinnBuilder API
---------------------------------------------

For convenience, here we build a simple model that only consists of add and conv
operators. Note that you can find the operator's detailed introduction in another
document, we won't go into detail here.

Generally, the API in CinnBuilder is fine-grained operator, in other words,
the algebra or basic DL operator.


.. code-block:: python

    d = builder.add(a, b)
    e = builder.conv(d, c)








Generate the program
---------------------

After the model building, the CinnBuilder will generate a CINN execution program,
and you can get it by invoking `builder.build()` function.


.. code-block:: python

    prog = builder.build()

    # You can print the returned program as following code:
    for i in range(prog.size()):
        print(prog[i])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    var_2 = elementwise_add(A, B)
    var_3, var_4, var_5, var_6 = conv2d(var_2, C, conv_type=forward, padding_algorithm=EXPLICIT, padding=[0,0], groups=1, data_format=NCHW, dilation=[1,1], stride=[1,1], output_shape=[])




Random fake input data
-----------------------------

Before running, you should read or generate some data to feed the model's input.
In model building, we just create some placeholder, to get the model's running
result, here we random some fake input data.


.. code-block:: python

    tensor_data = [
        np.random.random([1, 24, 56, 56]).astype("float32"),
        np.random.random([1, 24, 56, 56]).astype("float32"),
        np.random.random([144, 24, 1, 1]).astype("float32")
    ]








Set target
---------------------

The target identified where the model should run, now we support
two targets:

:code:`DefaultHostTarget`: the model will running at cpu.

:code:`DefaultNVGPUTarget`: the model will running at nv gpu.


.. code-block:: python

    if common.is_compiled_with_cuda():
        target = common.DefaultNVGPUTarget()
    else:
        target = common.DefaultHostTarget()

    print("Model running at ", target.arch)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Model running at  Arch.X86




Run program and print result
-----------------------------

Finally, you can running model by invoking function `build_and_get_output`.
The `build_and_get_output` accepts the input data and finally return the results
of model, it has four parameters:

:code:`target`: the model's irunning target.

:code:`tensor_inputs`: the model's input variable list.

:code:`input_data`: the actual data list, the order of the list must be the same as
`tensor_inputs`, otherwise, the resulting error.

:code:`tensor_outputs`: the model's output variable list, the ordering of the model's
result list is the same as `tensor_outputs`, here we just has one result `[e]`.


.. code-block:: python

    result = prog.build_and_get_output(target, [a, b, c], tensor_data, [e])

    # print result
    print(result[0].numpy(target))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[[[11.402205  10.357137  12.205004  ... 12.662119  12.108465
        12.17814  ]
       [11.668343  13.040956  12.447338  ... 11.788173  13.680928
        11.163821 ]
       [10.705553  12.2684765 12.922522  ... 11.701937  12.141318
        12.00931  ]
       ...
       [10.910082  13.12296   13.373997  ... 11.379147  11.237022
        12.465562 ]
       [12.829292  12.533173  10.209457  ... 12.024549  12.784143
        11.647084 ]
       [12.789625  10.647254  11.03008   ... 12.388807  11.375592
        13.725213 ]]

      [[12.557223  11.4291115 12.727175  ... 13.534015  10.9858055
        12.613867 ]
       [11.192857  13.379105  11.150632  ... 11.991193  12.629285
        11.94468  ]
       [10.205065  12.959714  12.440995  ... 11.217756  13.051765
        12.175887 ]
       ...
       [12.427084  11.945395  13.473354  ... 11.4361105 11.136014
        13.056772 ]
       [12.684954  11.870396  10.699707  ... 11.960862  12.979715
        11.861357 ]
       [13.8027525 11.347755  11.3299265 ... 11.397205  13.315683
        12.044161 ]]

      [[12.791991  11.036622  12.1653185 ... 14.04846   12.21716
        14.208747 ]
       [13.03016   13.604054  11.999368  ... 12.635714  14.058492
        11.8943205]
       [11.231338  13.568094  13.410501  ... 12.57478   12.68688
        12.738601 ]
       ...
       [11.014916  12.034544  13.943432  ... 11.6848755 11.914125
        12.689106 ]
       [13.902449  12.121396  10.947582  ... 13.289367  12.895223
        12.345871 ]
       [13.716233  11.422139  12.329879  ... 12.18836   11.6483965
        12.771475 ]]

      ...

      [[11.265371   9.405574  10.941015  ... 12.890999  11.279657
        11.894772 ]
       [11.781168  12.854194  11.055632  ... 11.7509775 11.732627
        10.933191 ]
       [ 9.057939  11.78274   12.684501  ... 12.096486  11.419121
        10.9600935]
       ...
       [ 9.710289  11.784645  14.149456  ... 11.0700865 11.318668
        10.767227 ]
       [12.895413  11.038522   9.862628  ... 11.10616   11.395766
        11.592048 ]
       [13.253885   9.710457  10.665722  ... 11.985099  10.861835
        12.774499 ]]

      [[10.264269   8.83633   10.130927  ... 10.239141  10.558953
         9.878659 ]
       [11.106882  11.340644  10.736336  ...  9.463569  11.541263
         9.14313  ]
       [ 9.732337  10.423719  10.554124  ... 10.472389   9.019059
         9.535725 ]
       ...
       [ 9.636091  11.423969  12.298453  ... 10.077561   9.2619705
        10.80918  ]
       [10.809883   9.855771   8.53665   ... 10.269746  10.517506
         9.652535 ]
       [10.747098   9.658329   9.552267  ...  9.681683   9.387086
        10.970349 ]]

      [[13.48398   12.029467  13.422038  ... 15.099518  13.211387
        12.806797 ]
       [12.734749  14.219908  13.266703  ... 12.847879  14.945753
        10.753968 ]
       [12.811082  13.176632  13.463695  ... 12.354083  13.412345
        11.454769 ]
       ...
       [12.897841  13.863539  15.539668  ... 13.398994  12.284518
        13.89617  ]
       [13.613338  12.448188  11.305966  ... 12.875809  13.898836
        12.225086 ]
       [14.096809  12.52793   13.014849  ... 12.049956  12.776677
        13.420905 ]]]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.977 seconds)


.. _sphx_glr_download_tutorials_cinn_builder.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cinn_builder.py <cinn_builder.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cinn_builder.ipynb <cinn_builder.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
