.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_cinn_builder.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_cinn_builder.py:


Run model by using CinnBuilder API
=========================================================

In this tutorial, we will introduce the ways to build and run a model using CinnBuilder APIs.


.. code-block:: python


    import cinn
    from cinn import frontend
    from cinn import common
    import numpy as np
    # sphinx_gallery_thumbnail_path = './paddlepaddle.png'








Define the CinnBuilder.
-----------------------------

Using CinnBuilder is a convenient way to build a model in CINN. You can build and run
a model by invoking CinnBuilder's API as following.

:code:`name`: the ID of CinnBuilder


.. code-block:: python

    builder = frontend.CinnBuilder(name="add_conv")








Define the input variable of the model.
---------------------------------------------

The input variable should be created by create_input API. Note that the variable
here is just a placeholder, does not need the actual data.

:code:`type`: the data type of input variable, now support `Void`, `Int`, `UInt`,
`Float`, `Bool` and `String`, the parameter is the type's bit-widths, here the
data type is `float32`.

:code:`shape`: The shape of the input variable, note that here does not support
dynamic shape, so the dimension value should be greater than 0 now.

:code:`id_hint`: the name of variable, the defaule value is `""`


.. code-block:: python

    a = builder.create_input(
        type=common.Float(32), shape=(1, 24, 56, 56), id_hint="A")
    b = builder.create_input(
        type=common.Float(32), shape=(1, 24, 56, 56), id_hint="B")
    c = builder.create_input(
        type=common.Float(32), shape=(144, 24, 1, 1), id_hint="C")








Build the model by using CinnBuilder API
---------------------------------------------

For convenience, here we build a simple model that only consists of add and conv
operators. Note that you can find the operator's detailed introduction in another
document, we won't go into detail here.

Generally, the API in CinnBuilder is fine-grained operator, in other words,
the algebra or basic DL operator.


.. code-block:: python

    d = builder.add(a, b)
    res = builder.conv(d, c)








Set target
---------------------

The target identified where the model should run, now we support
two targets:

:code:`DefaultHostTarget`: the model will running at cpu.

:code:`DefaultNVGPUTarget`: the model will running at nv gpu.


.. code-block:: python

    if common.is_compiled_with_cuda():
        target = common.DefaultNVGPUTarget()
    else:
        target = common.DefaultHostTarget()

    print("Model running at ", target.arch)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Model running at  Arch.X86




Generate the program
---------------------

After the model building, the `Computation` will generate a CINN execution program,
and you can get it like:


.. code-block:: python

    computation = frontend.Computation.build_and_compile(target, builder)








Random fake input data
-----------------------------

Before running, you should read or generate some data to feed the model's input.
:code:`get_tensor`: Get the tensor with specific name in computation.
:code:`from_numpy`: Fill the tensor with numpy data.


.. code-block:: python

    tensor_data = [
        np.random.random([1, 24, 56, 56]).astype("float32"),
        np.random.random([1, 24, 56, 56]).astype("float32"),
        np.random.random([144, 24, 1, 1]).astype("float32")
    ]

    computation.get_tensor("A").from_numpy(tensor_data[0], target)
    computation.get_tensor("B").from_numpy(tensor_data[1], target)
    computation.get_tensor("C").from_numpy(tensor_data[2], target)








Run program and print result
-----------------------------

Finally, you can run the model by invoking function `execute()`.
After that, you can get the tensor you want by `get_tensor` with tensor's name.


.. code-block:: python

    computation.execute()
    res_tensor = computation.get_tensor(str(res))
    res_data = res_tensor.numpy(target)

    # print result
    print(res_data)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[[[11.825397   9.497734  10.994997  ... 11.564425  11.802574
         7.810427 ]
       [10.633702   9.107078  13.146357  ... 11.36958    9.3614
        11.78407  ]
       [ 9.8078165 10.150157  12.43671   ... 10.297805  10.210708
        10.463805 ]
       ...
       [10.413079  11.043922  10.318946  ... 11.812415  12.097085
         9.659798 ]
       [11.228265  10.6725     9.835354  ... 10.482658  11.95654
         9.18777  ]
       [ 9.941735  11.520419   9.88613   ... 11.382548   9.556459
        10.539758 ]]

      [[11.862374  10.412022  10.64708   ... 13.073614  12.712017
         8.962125 ]
       [10.150982  10.44735   14.443952  ... 12.872017   9.668953
        13.492509 ]
       [10.061748  11.5756035 13.982996  ... 11.863102  11.173639
        11.466635 ]
       ...
       [11.294771  12.937322  10.699363  ... 11.50262   12.590882
        10.514754 ]
       [12.177071  10.651883  11.141602  ... 10.864339  12.156313
         9.669305 ]
       [10.98691   11.008277  11.613059  ... 12.75268   10.466328
        11.484495 ]]

      [[11.993276  10.296038  12.917037  ... 12.420006  11.573832
         8.750177 ]
       [11.177816  11.046989  12.749254  ... 11.805249  10.243988
        11.35535  ]
       [ 9.927774  11.629159  13.330226  ... 11.411562  11.176723
        11.927517 ]
       ...
       [10.901737  11.603136   9.18254   ... 13.310388  13.02659
        10.84926  ]
       [12.864747  10.805179  10.816618  ... 10.757512  13.069421
         9.886452 ]
       [11.096237  10.548768   9.700233  ... 11.351011  10.435749
        11.4909115]]

      ...

      [[12.580488   9.748916  13.352043  ... 12.916212  14.747884
         9.173361 ]
       [11.456836  12.268961  14.026298  ... 12.549062  11.526264
        12.539145 ]
       [ 9.893695  12.353331  13.198449  ... 12.447523  11.861933
        13.044559 ]
       ...
       [10.739757  11.9724    11.158052  ... 13.800599  13.70488
        12.048205 ]
       [13.363939  11.636631  10.710475  ... 11.0932255 14.440622
         9.577049 ]
       [11.643432  12.5627165 10.927944  ... 13.333765  12.344969
        12.63435  ]]

      [[12.7762785 12.074184  14.75132   ... 14.043757  14.032208
        10.259153 ]
       [12.345865  13.105844  15.157388  ... 15.246608  11.177194
        12.736171 ]
       [10.891927  13.041755  15.017636  ... 13.430908  13.1390705
        13.972874 ]
       ...
       [12.177785  15.373679  11.070608  ... 13.566356  13.865482
        12.768555 ]
       [14.492583  12.419825  13.24457   ... 12.044023  14.947982
        11.263625 ]
       [11.836925  12.706204  11.242768  ... 13.895689  12.850883
        12.740564 ]]

      [[13.027336  11.038504  12.119643  ... 12.965125  13.473438
         9.808621 ]
       [10.70022   11.486482  14.947728  ... 13.676709  10.455558
        13.6737175]
       [ 9.996818  12.260973  13.621142  ... 12.9456    11.903737
        13.574813 ]
       ...
       [12.345036  14.311147  12.036575  ... 12.936253  13.137784
        12.097998 ]
       [12.825854  11.741037  11.357099  ... 11.5891285 13.473252
        10.316513 ]
       [11.763051  12.490102  11.294037  ... 12.816008  11.394723
        12.43022  ]]]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.083 seconds)


.. _sphx_glr_download_tutorials_cinn_builder.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cinn_builder.py <cinn_builder.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cinn_builder.ipynb <cinn_builder.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
