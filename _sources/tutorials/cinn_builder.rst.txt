.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_cinn_builder.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_cinn_builder.py:


Run model by using CinnBuilder API
=========================================================

In this tutorial, we will introduce the ways to build and run a model using CinnBuilder APIs.


.. code-block:: python


    import cinn
    from cinn import frontend
    from cinn import common
    import numpy as np
    # sphinx_gallery_thumbnail_path = './paddlepaddle.png'








Define the CinnBuilder.
-----------------------------

Using CinnBuilder is a convenient way to build a model in CINN. You can build and run
a model by invoking CinnBuilder's API as following.

:code:`name`: the ID of CinnBuilder


.. code-block:: python

    builder = frontend.CinnBuilder(name="add_conv")








Define the input variable of the model.
---------------------------------------------

The input variable should be created by create_input API. Note that the variable
here is just a placeholder, does not need the actual data.

:code:`type`: the data type of input variable, now support `Void`, `Int`, `UInt`,
`Float`, `Bool` and `String`, the parameter is the type's bit-widths, here the
data type is `float32`.

:code:`shape`: The shape of the input variable, note that here does not support
dynamic shape, so the dimension value should be greater than 0 now.

:code:`id_hint`: the name of variable, the defaule value is `""`


.. code-block:: python

    a = builder.create_input(
        type=common.Float(32), shape=(1, 24, 56, 56), id_hint="A")
    b = builder.create_input(
        type=common.Float(32), shape=(1, 24, 56, 56), id_hint="B")
    c = builder.create_input(
        type=common.Float(32), shape=(144, 24, 1, 1), id_hint="C")








Build the model by using CinnBuilder API
---------------------------------------------

For convenience, here we build a simple model that only consists of add and conv
operators. Note that you can find the operator's detailed introduction in another
document, we won't go into detail here.

Generally, the API in CinnBuilder is fine-grained operator, in other words,
the algebra or basic DL operator.


.. code-block:: python

    d = builder.add(a, b)
    res = builder.conv(d, c)








Set target
---------------------

The target identified where the model should run, now we support
two targets:

:code:`DefaultHostTarget`: the model will running at cpu.

:code:`DefaultNVGPUTarget`: the model will running at nv gpu.


.. code-block:: python

    if common.is_compiled_with_cuda():
        target = common.DefaultNVGPUTarget()
    else:
        target = common.DefaultHostTarget()

    print("Model running at ", target.arch)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Model running at  Arch.X86




Generate the program
---------------------

After the model building, the `Computation` will generate a CINN execution program,
and you can get it like:


.. code-block:: python

    computation = frontend.Computation.build_and_compile(target, builder)








Random fake input data
-----------------------------

Before running, you should read or generate some data to feed the model's input.
:code:`get_tensor`: Get the tensor with specific name in computation.
:code:`from_numpy`: Fill the tensor with numpy data.


.. code-block:: python

    tensor_data = [
        np.random.random([1, 24, 56, 56]).astype("float32"),
        np.random.random([1, 24, 56, 56]).astype("float32"),
        np.random.random([144, 24, 1, 1]).astype("float32")
    ]

    computation.get_tensor("A").from_numpy(tensor_data[0], target)
    computation.get_tensor("B").from_numpy(tensor_data[1], target)
    computation.get_tensor("C").from_numpy(tensor_data[2], target)








Run program and print result
-----------------------------

Finally, you can run the model by invoking function `execute()`.
After that, you can get the tensor you want by `get_tensor` with tensor's name.


.. code-block:: python

    computation.execute()
    res_tensor = computation.get_tensor(str(res))
    res_data = res_tensor.numpy(target)

    # print result
    print(res_data)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[[[ 8.568227  10.495934  14.111277  ... 12.915776  10.897482
        11.8130665]
       [11.73036   12.745227   9.864195  ... 12.029252  11.720777
        10.681017 ]
       [11.552584  11.194932  11.731369  ...  9.6833    11.616971
         9.923548 ]
       ...
       [11.1857    10.039899  10.077531  ... 12.993214  12.591804
        11.112865 ]
       [10.086812  11.090678  10.932195  ...  9.149495  11.799527
        12.7821455]
       [11.819088  13.115123  11.5466175 ... 12.03128   13.830334
        10.10156  ]]

      [[ 9.140931  10.158964  12.824207  ... 11.762231  10.866086
        10.385833 ]
       [10.199422  11.630757   9.003504  ... 10.739734  10.557848
        12.422776 ]
       [11.435442  10.80628   10.257032  ...  8.779116  10.648233
         8.874485 ]
       ...
       [ 9.871626   8.696374  11.161393  ... 11.424716  11.248444
         8.494017 ]
       [11.031661  11.940538  10.0210495 ...  9.0157585 10.92778
        10.79815  ]
       [11.198552  10.2410145 10.011838  ... 12.412579  11.343032
         9.757355 ]]

      [[ 9.460655  11.023021  13.480662  ... 13.243182  10.792337
        11.98477  ]
       [11.751013  13.304368   9.321863  ... 11.729551  12.529137
        11.4219675]
       [11.73177   10.495691  11.171243  ...  9.691622  10.044816
         8.952812 ]
       ...
       [10.687203   9.228727  10.440135  ... 11.85991   11.144823
         9.490603 ]
       [10.2525835 10.747784  10.912067  ...  8.677981  12.606865
        10.946193 ]
       [11.818406  12.54317   11.840716  ... 11.409017  12.1202135
        10.361343 ]]

      ...

      [[ 8.677882  11.157555  14.701891  ... 12.634993  11.22414
        12.291926 ]
       [12.081546  12.866144   9.668225  ... 12.767154  12.435603
        12.520116 ]
       [11.400303   9.9390745 11.3090515 ... 10.442067  12.2591305
        10.400177 ]
       ...
       [10.717231   9.740044  12.104015  ... 14.021527  13.324479
        10.637178 ]
       [11.404556  11.44735   11.5851555 ...  9.318158  12.825827
        12.892293 ]
       [11.296053  12.722934  12.22791   ... 13.714926  14.281215
        10.548234 ]]

      [[ 9.138985  11.493175  13.945364  ... 12.947515  11.058085
        11.553017 ]
       [11.907112  12.72487    9.442264  ... 11.371687  11.484827
        10.841688 ]
       [11.867383   9.942226  11.449764  ...  9.880114  11.890283
         9.492042 ]
       ...
       [10.963314   9.424794  10.48686   ... 13.644491  12.413258
        11.455426 ]
       [10.264303  11.02569   11.5409565 ... 10.01723   12.619312
        11.395249 ]
       [10.879699  11.792351  11.205195  ... 12.478064  12.980261
        10.551956 ]]

      [[ 7.5163517  9.616672  13.253782  ... 11.829936   9.966538
        10.329812 ]
       [10.564097  11.971728   7.9362755 ...  9.654983  10.189467
        10.020061 ]
       [10.67687    9.2631035 10.837108  ...  9.0934725 10.470772
         8.092543 ]
       ...
       [ 9.488286   8.771321   8.743898  ... 10.773622  10.852684
         8.901657 ]
       [ 8.953464  10.175392   9.531574  ...  8.251192  11.690654
        10.404082 ]
       [10.233924  10.672572  10.099605  ... 10.1696    10.674373
         9.36539  ]]]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.052 seconds)


.. _sphx_glr_download_tutorials_cinn_builder.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cinn_builder.py <cinn_builder.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cinn_builder.ipynb <cinn_builder.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
