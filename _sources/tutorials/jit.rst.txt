.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_jit.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_jit.py:


JIT in CINN
=====================

In this tutorial, we will introduce the JIT module that execute the DSL on X86 and NV GPU.


.. code-block:: python


    import cinn
    import numpy as np
    from cinn import runtime
    # sphinx_gallery_thumbnail_path = './paddlepaddle.png'








declare some variables for latter use


.. code-block:: python

    m = cinn.Expr(64)
    n = cinn.Expr(64)
    k = cinn.Expr(8)
    bn = cinn.Expr(32)








Decleare the computation
-------------------------


.. code-block:: python

    A = cinn.Placeholder("float32", "A", [m, k])
    B = cinn.Placeholder("float32", "B", [k, n])

    kr = cinn.Var(k.as_int32(), "kr")
    C = cinn.compute([
        m, n
    ], lambda v: cinn.reduce_sum(A(v[0], kr.expr()) * B(kr.expr(), v[1]), [kr]),
                     "C")

    stages = cinn.create_stages([C])

    target = cinn.Target()
    builder = cinn.Module.Builder("matmul", target)

    func = cinn.lower("matmul", stages, [A.to_tensor(), B.to_tensor(), C])
    builder.add_function(func)
    module = builder.build()








Create a JIT engine.
---------------------



.. code-block:: python

    jit = cinn.ExecutionEngine()
    jit.link(module)








Execute the compiled function



.. code-block:: python

    a = runtime.cinn_buffer_t(
        np.random.randn(m.int(), k.int()).astype("float32"),
        runtime.cinn_x86_device)
    b = runtime.cinn_buffer_t(
        np.random.randn(m.int(), k.int()).astype("float32"),
        runtime.cinn_x86_device)
    c = runtime.cinn_buffer_t(
        np.zeros([m.int(), n.int()]).astype("float32"), runtime.cinn_x86_device)

    args = [runtime.cinn_pod_value_t(_) for _ in [a, b, c]]
    matmul = jit.lookup("matmul")
    matmul(args)

    print(c.numpy())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-4.081723   -0.5517099   2.4848666  ... -0.4616294  -0.98702335
       0.32720998]
     [-1.7864906  -0.730955    1.0589699  ...  1.455684   -2.54
       2.1056092 ]
     [ 2.972013   -0.13308796  1.4039603  ...  3.8339949   0.8497251
      -4.981779  ]
     ...
     [-2.9961278  -0.56431466  1.3524063  ... -3.4160056  -2.2495627
       5.204043  ]
     [-1.2378733  -0.13717127 -1.5316045  ...  3.8830905   0.66755056
      -3.170727  ]
     [ 1.1824512   0.87764204 -1.5679601  ... -0.27786762 -4.2257524
      -2.2286716 ]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.479 seconds)


.. _sphx_glr_download_tutorials_jit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: jit.py <jit.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: jit.ipynb <jit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
