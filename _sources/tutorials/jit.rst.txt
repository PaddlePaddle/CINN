.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_jit.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_jit.py:


JIT in CINN
=====================

In this tutorial, we will introduce the JIT module that execute the DSL on X86 and NV GPU.


.. code-block:: python


    import cinn
    import numpy as np
    from cinn import runtime
    # sphinx_gallery_thumbnail_path = './paddlepaddle.png'








declare some variables for latter use


.. code-block:: python

    m = cinn.Expr(64)
    n = cinn.Expr(64)
    k = cinn.Expr(8)
    bn = cinn.Expr(32)








Decleare the computation
-------------------------


.. code-block:: python

    A = cinn.Placeholder("float32", "A", [m, k])
    B = cinn.Placeholder("float32", "B", [k, n])

    kr = cinn.Var(k.as_int32(), "kr")
    C = cinn.compute([
        m, n
    ], lambda v: cinn.reduce_sum(A(v[0], kr.expr()) * B(kr.expr(), v[1]), [kr]),
                     "C")

    stages = cinn.create_stages([C])

    target = cinn.Target()
    builder = cinn.Module.Builder("matmul", target)

    func = cinn.lower("matmul", stages, [A.to_tensor(), B.to_tensor(), C])
    builder.add_function(func)
    module = builder.build()








Create a JIT engine.
---------------------



.. code-block:: python

    jit = cinn.ExecutionEngine()
    jit.link(module)








Execute the compiled function



.. code-block:: python

    a = runtime.cinn_buffer_t(
        np.random.randn(m.int(), k.int()).astype("float32"),
        runtime.cinn_x86_device)
    b = runtime.cinn_buffer_t(
        np.random.randn(m.int(), k.int()).astype("float32"),
        runtime.cinn_x86_device)
    c = runtime.cinn_buffer_t(
        np.zeros([m.int(), n.int()]).astype("float32"), runtime.cinn_x86_device)

    args = [runtime.cinn_pod_value_t(_) for _ in [a, b, c]]
    matmul = jit.lookup("matmul")
    matmul(args)

    print(c.numpy())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-3.2250903  -3.2721314  -1.4055511  ... -2.5876188  -0.13187855
       0.64886916]
     [ 3.448223    0.49129963  2.7646284  ...  2.459318    0.02075402
       1.8039622 ]
     [ 4.6250644   2.7085776   2.944717   ...  4.491487    1.5269206
      -0.37754306]
     ...
     [-2.9242988  -1.8332645  -1.2168374  ... -2.4515514  -1.5931588
       2.8810375 ]
     [ 3.0400429   3.6650949  -1.8074642  ...  0.45705932 -1.3255043
      -0.7884    ]
     [-1.2467299  -0.8290491  -0.97338915 ... -1.8139666  -1.1866727
       2.004608  ]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.504 seconds)


.. _sphx_glr_download_tutorials_jit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: jit.py <jit.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: jit.ipynb <jit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
