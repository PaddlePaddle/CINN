#include <cstdint>

#define CINN_WITH_CUDA
#include "bfloat16.h"
#include "float16.h"
using cinn::common::bfloat16;
using cinn::common::float16;
// using cinn::common::half4;
// using cinn::common::half8;
// using cinn::common::float8;

#include "cinn_cuda_runtime_source.cuh"

extern "C" {

__global__
void __launch_bounds__(1024) fn_scatter_add_0_35_kernel(const float* __restrict__ x, const float* __restrict__ y, const int32_t* __restrict__ index, float* __restrict__ var_1658)
{
  if (((int)blockIdx.x < 40)) {
    if (((int)threadIdx.x < 1024)) {
      var_1658[((1024 * (int)blockIdx.x) + (int)threadIdx.x)] = cinn_nvgpu_index_add_fp32(x[((1024 * (int)blockIdx.x) + (int)threadIdx.x)], ((int)blockIdx.x / 4), y, ((512 * ((int)threadIdx.x / 512)) + (((((int)threadIdx.x & 511) / 32) * 32) + ((1024 * ((int)blockIdx.x & 3)) + ((int)threadIdx.x & 31)))), 4096, index, 1);
    };
  };
}

}
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29558016
// Cuda compilation tools, release 11.2, V11.2.142
// Based on NVVM 7.0.1
//

.version 7.2
.target sm_70
.address_size 64

        // .globl       fn_scatter_add_0_35_kernel
.global .align 4 .u32 _ZN4cinn6common7float165shiftE;
.global .align 4 .u32 _ZN4cinn6common7float169shiftSignE;
.global .align 4 .u32 _ZN4cinn6common7float164infNE;
.global .align 4 .u32 _ZN4cinn6common7float164maxNE;
.global .align 4 .u32 _ZN4cinn6common7float164minNE;
.global .align 4 .u32 _ZN4cinn6common7float164sigNE;
.global .align 4 .u32 _ZN4cinn6common7float164infCE;
.global .align 4 .u32 _ZN4cinn6common7float164nanNE;
.global .align 4 .u32 _ZN4cinn6common7float164maxCE;
.global .align 4 .u32 _ZN4cinn6common7float164minCE;
.global .align 4 .u32 _ZN4cinn6common7float164sigCE;
.global .align 4 .u32 _ZN4cinn6common7float164mulNE;
.global .align 4 .u32 _ZN4cinn6common7float164mulCE;
.global .align 4 .u32 _ZN4cinn6common7float164subCE;
.global .align 4 .u32 _ZN4cinn6common7float164norCE;
.global .align 4 .u32 _ZN4cinn6common7float164maxDE;
.global .align 4 .u32 _ZN4cinn6common7float164minDE;

.visible .entry fn_scatter_add_0_35_kernel(
        .param .u64 fn_scatter_add_0_35_kernel_param_0,
        .param .u64 fn_scatter_add_0_35_kernel_param_1,
        .param .u64 fn_scatter_add_0_35_kernel_param_2,
        .param .u64 fn_scatter_add_0_35_kernel_param_3
)
.maxntid 1024, 1, 1
{
        .reg .pred      %p<8>;
        .reg .f32       %f<8>;
        .reg .b32       %r<29>;
        .reg .b64       %rd<17>;


        ld.param.u64    %rd3, [fn_scatter_add_0_35_kernel_param_0];
        ld.param.u64    %rd4, [fn_scatter_add_0_35_kernel_param_1];
        ld.param.u64    %rd5, [fn_scatter_add_0_35_kernel_param_2];
        ld.param.u64    %rd6, [fn_scatter_add_0_35_kernel_param_3];
        mov.u32         %r1, %ctaid.x;
        setp.gt.s32     %p1, %r1, 39;
        mov.u32         %r2, %tid.x;
        setp.gt.s32     %p2, %r2, 1023;
        or.pred         %p3, %p1, %p2;
        @%p3 bra        LBB0_9;

        cvta.to.global.u64      %rd7, %rd3;
        shl.b32         %r11, %r1, 10;
        add.s32         %r3, %r11, %r2;
        mul.wide.s32    %rd8, %r3, 4;
        add.s64         %rd9, %rd7, %rd8;
        ld.global.nc.f32        %f6, [%rd9];
        shr.s32         %r12, %r1, 31;
        shr.u32         %r13, %r12, 30;
        add.s32         %r14, %r1, %r13;
        shr.s32         %r4, %r14, 2;
        shr.s32         %r15, %r2, 31;
        shr.u32         %r16, %r15, 23;
        add.s32         %r17, %r2, %r16;
        and.b32         %r18, %r17, -512;
        and.b32         %r19, %r1, 3;
        and.b32         %r20, %r2, 511;
        bfi.b32         %r21, %r19, %r20, 10, 2;
        add.s32         %r5, %r21, %r18;
        cvta.to.global.u64      %rd1, %rd5;
        cvta.to.global.u64      %rd2, %rd4;
        mov.u32         %r26, -1;

LBB0_2:
        mov.u32         %r27, %r26;

LBB0_3:
        add.s32         %r8, %r27, 1;
        setp.gt.s32     %p4, %r27, -1;
        mov.u32         %r26, -1;
        @%p4 bra        LBB0_5;

        mul.wide.s32    %rd10, %r27, 4;
        add.s64         %rd11, %rd1, %rd10;
        ld.global.nc.u32        %r23, [%rd11+4];
        setp.ne.s32     %p5, %r23, %r4;
        mov.u32         %r27, %r8;
        mov.u32         %r26, %r8;
        @%p5 bra        LBB0_3;

LBB0_5:
        setp.lt.s32     %p6, %r26, 0;
        @%p6 bra        LBB0_7;

        shl.b32         %r24, %r26, 12;
        add.s32         %r25, %r5, %r24;
        mul.wide.s32    %rd12, %r25, 4;
        add.s64         %rd13, %rd2, %rd12;
        ld.global.nc.f32        %f5, [%rd13];
        add.f32         %f6, %f6, %f5;

LBB0_7:
        setp.ne.s32     %p7, %r26, -1;
        @%p7 bra        LBB0_2;

        cvta.to.global.u64      %rd14, %rd6;
        add.s64         %rd16, %rd14, %rd8;
        st.global.f32   [%rd16], %f6;

LBB0_9:
        ret;

}